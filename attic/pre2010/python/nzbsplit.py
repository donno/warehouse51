
from xml.dom import minidom
import re


nzbHeader = """<?xml version="1.0" encoding="iso-8859-1" ?>
<!DOCTYPE nzb PUBLIC "-//newzBin//DTD NZB 1.0//EN" "http://www.nzbindex.com/nzb-1.0.dtd">
<!-- NZB Generated by nzbsplit.py -->
<nzb xmlns="http://www.newzbin.com/DTD/2003/nzb">
"""

nzbFooter = """
</nzb>"""


def cleanName(filename):
  """Cleans up the name."""
  lastCloseBrace = filename.rfind(']')
  lastOpenBrace = filename.rfind('[') + 1
  if lastCloseBrace < 0:
    return filename
  else:
    return filename[lastOpenBrace:lastCloseBrace].strip()


def new(filename, files):
  with open(filename, 'w') as fw:
    fw.write(nzbHeader)
    
    for f in files:
      fw.write(f.toxml())
      fw.write('\n')

    fw.write(nzbFooter)
    

def split(filename):
  with open(filename, 'r') as fr:
    nzb = minidom.parse(fr)
    
  files = nzb.getElementsByTagName('file')
  print len(files)


  # Step one decide how to split:
  # 
  # The goal is to have a separate nzb for Show.S01E01 and Show.S01E02
  # but not a separate nzb for .r01 and .r02 for S01E01.
  #
  # Assume parts are marked with [N/D] in the subject line.
  
  partMatcher = re.compile(r'(.*)-\[(\d+)/(\d+)] -(.*)')
  
  # This assumes the name of the show is quoted 
  # i.e:  Something - "Show.S2E01.stuff" more stuff
  parthMatcherQuoted = re.compile(r'.*"(.*s(\d+)e(\d+))(.*)".*')
  
  grouping = {}

  # For error checking makesure every group has the same number of parts.
  groupToPartCount = {}
  
  for fileElement in files:    
    subject = fileElement.attributes['subject'].value
          
    match = partMatcher.match(subject)
    if not match:
      # Try the second pattern.
      match = parthMatcherQuoted.match(subject)

    if match:
      prefix, part, partCount, suffix = match.groups()     
      grouping.setdefault(prefix, []).append(fileElement)
      
      existingPartCount = groupToPartCount.get(prefix, None)
      if existingPartCount is not None:
        assert existingPartCount == partCount
      else:
        groupToPartCount[prefix] = partCount
    else:
      print "ERROR: Could not match...: %s" % (subject)
      return False

  # Step 2: write out the new files.
  for name, elements in grouping.iteritems():
    new(cleanName(name) + '.nzb', elements)
 
  return True

if __name__ == '__main__':
  import sys
  sys.exit(split(sys.argv[1]))
