# A build script for the Ninja build system (https://ninja-build.org) for
# building parse_fast_import.
#
# This file is not generated by another script but is instead written by hand.
# It is currently only designed for Microsoft Windows and being run from the
# Visual Studio Command Prompt so cl.exe/link.exe are on the path.

builddir = build
cxx = cl
linker = link

includes =
cflags = -MD -fp:precise -std:c++17 -EHsc

executableext = .exe

# Set-up some useful rules (think of this as tools/commands). This is the how
# to build.
rule cxx
  deps = msvc
  command = $cxx -nologo -showIncludes -Z7 -c $cdebug $cflags $cvars $in -Fo:$out

rule link
  command = $linker -nologo -debug $ldflags $in -out:$out
  description = LINK $out

rule run
  command = cmd /C "$in $arguments"
  pool = console

rule archive-sources
  command = tar cf $out $in *.cpp *.hpp

rule archive-bins
  command = tar cf $out $in

rule fast-export
  command = cmd /C "git --work-tree=$in fast-export master > $out"

# Set-up the what to build.
build $builddir/parse_fast_import.obj: cxx parse_fast_import.cpp
build $builddir\parse_fast_import$executableext: link $builddir/parse_fast_import.obj

build $builddir/parse_fast_import-source.tar : archive-sources build.ninja README.md
build $builddir/parse_fast_import-bin.tar : archive-bins README.md $builddir/parse_fast_import$executableext

build runnable : phony $builddir/parse_fast_import$executableext

# This exports the current repository out in the fast-import format to then
# be used in the test later on:
build $builddir/self_fast_import: fast-export .


# Avoid actually running the executables below by setting a default target.
default runnable

# Set-up a target to run the tool against the export of the current repository.
build runimport: run $builddir\parse_fast_import$executableext $builddir/self_fast_import
